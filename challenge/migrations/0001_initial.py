# Generated by Django 5.1.4 on 2025-01-25 10:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def add_users_to_default_group(apps, schema_editor):
    User = apps.get_model('account', 'User')
    ChallengeGroup = apps.get_model('challenge', 'ChallengeGroup')
    GroupMembership = apps.get_model('challenge', 'GroupMembership')
    
    # 기본 그룹 생성 또는 가져오기
    default_group, _ = ChallengeGroup.objects.get_or_create(name="기본_그룹")
    
    # 모든 유저를 기본 그룹에 추가
    users = User.objects.all()
    for user in users:
        GroupMembership.objects.get_or_create(
            user=user,
            group=default_group,
            defaults={
                'role': 'MEMBER',
                'is_active': True
            }
        )

def remove_users_from_default_group(apps, schema_editor):
    ChallengeGroup = apps.get_model('challenge', 'ChallengeGroup')
    GroupMembership = apps.get_model('challenge', 'GroupMembership')
    
    default_group = ChallengeGroup.objects.filter(name="기본_그룹").first()
    if default_group:
        GroupMembership.objects.filter(group=default_group).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('platform', models.CharField(choices=[('BAEKJOON', '백준'), ('PROGRAMMERS', '프로그래머스'), ('LEETCODE', '리트코드')], max_length=20)),
                ('link', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='challenge.challengegroup')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', '관리자'), ('MEMBER', '멤버')], default='MEMBER', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenge.challengegroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='challengegroup',
            name='members',
            field=models.ManyToManyField(related_name='groups', through='challenge.GroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChallengeDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_problems', to=settings.AUTH_USER_MODEL)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_days', to='challenge.challenge')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenge.problem')),
            ],
            options={
                'ordering': ['date'],
                'unique_together': {('challenge', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('SOLVED', '해결'), ('FAILED', '실패'), ('SKIPPED', '건너뜀'), ('IN_PROGRESS', '진행 중')], max_length=20)),
                ('solution_link', models.URLField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to='challenge.challengeday')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('user', 'challenge_day')},
            },
        ),
        migrations.RunPython(
            add_users_to_default_group,
            remove_users_from_default_group
        ),
    ]
